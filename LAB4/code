#include<stdio.h>
#include<stdlib.h>

struct node {
    int data;
    struct node *next;
};

struct node *head = NULL, *head2 = NULL;

void insert_first(struct node **head, int x) {
    struct node *t;
    t = (struct node *)malloc(sizeof(struct node));
    t->next = *head;
    t->data = x;
    *head = t;
}

void insert_first2(struct node **head, int x) {
    struct node *t;
    t = (struct node *)malloc(sizeof(struct node));
    t->next = *head;
    t->data = x;
    *head = t;
}

void insert_last(struct node **head, int x) {
    struct node *t;
    t = (struct node *)malloc(sizeof(struct node));
    t->data = x;
    t->next = NULL;
    if (*head == NULL) {
        *head = t;
        return;
    }
    struct node *p = *head;
    while (p->next != NULL) {
        p = p->next;
    }
    p->next = t;
}

void insert_pos(struct node **head, int x, int pos) {
    struct node *t, *p, *q;
    t = (struct node *)malloc(sizeof(struct node));
    t->data = x;
    p = *head;
    q = NULL;
    for (int i = 1; i < pos; i++) {
        q = p;
        p = p->next;
    }
    t->next = p;
    if (q == NULL) {
        *head = t;
    } else {
        q->next = t;
    }
}

void delete_first(struct node **head) {
    if (*head == NULL) {
        return;
    }
    struct node *p = *head;
    *head = p->next;
    free(p);
}

void delete_last(struct node **head) {
    if (*head == NULL) {
        return;
    }
    struct node *p = *head, *q = NULL;
    while (p->next != NULL) {
        q = p;
        p = p->next;
    }
    if (q == NULL) {
        *head = NULL;
    } else {
        q->next = NULL;
    }
    free(p);
}

void delete_pos(struct node **head, int pos) {
    if (*head == NULL) {
        return;
    }
    struct node *p = *head, *q = NULL;
    for (int i = 1; i < pos && p != NULL; i++) {
        q = p;
        p = p->next;
    }
    if (p == NULL) {
        return; // Position not found
    }
    if (q == NULL) {
        *head = p->next;
    } else {
        q->next = p->next;
    }
    free(p);
}

void display(struct node *head) {
    while (head != NULL) {
        printf("%d->", head->data);
        head = head->next;
    }
    printf("NULL\n");
}

struct node *concatenate(struct node *head1, struct node *head2) {
    struct node *concatenated = head1;
    while (head1->next != NULL) {
        head1 = head1->next;
    }
    head1->next = head2;
    return concatenated;
}

struct node *reverse(struct node *head) {
    struct node *prev = NULL, *current = head, *next = NULL;
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    head = prev;
    return head;
}

void sort(struct node *head) {
    int swapped;
    struct node *ptr;
    struct node *lptr = NULL;

    if (head == NULL) {
        return;
    }

    do {
        swapped = 0;
        ptr = head;

        while (ptr->next != lptr) {
            if (ptr->data > ptr->next->data) {
                int temp = ptr->data;
                ptr->data = ptr->next->data;
                ptr->next->data = temp;
                swapped = 1;
            }
            ptr = ptr->next;
        }
        lptr = ptr;
    } while (swapped);
}

int main() {
    insert_first(&head, 5);
    insert_first(&head, 7);
    insert_last(&head, 9);
    insert_pos(&head, 2, 2);
    printf("List 1: ");
    display(head);

    insert_first2(&head2, 5);
    insert_first2(&head2, 7);
    insert_first2(&head2, 8);
    insert_first2(&head2, 11);
    printf("List 2: ");
    display(head2);

    sort(head);
    printf("Sorted List 1: ");
    display(head);

    struct node *concatenated = concatenate(head, head2);
    printf("Concatenated List: ");
    display(concatenated);

    struct node *reversed = reverse(concatenated);
    printf("Reversed List: ");
    display(reversed);

    return 0;
}
